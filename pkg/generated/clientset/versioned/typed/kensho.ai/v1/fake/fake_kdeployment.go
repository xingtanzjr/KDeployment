/*
This is the test project from Kensho
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	kenshoaiv1 "kensho.ai/kdeployment/pkg/apis/kensho.ai/v1"
)

// FakeKDeployments implements KDeploymentInterface
type FakeKDeployments struct {
	Fake *FakeKenshoV1
	ns   string
}

var kdeploymentsResource = schema.GroupVersionResource{Group: "kensho.ai", Version: "v1", Resource: "kdeployments"}

var kdeploymentsKind = schema.GroupVersionKind{Group: "kensho.ai", Version: "v1", Kind: "KDeployment"}

// Get takes name of the kDeployment, and returns the corresponding kDeployment object, and an error if there is any.
func (c *FakeKDeployments) Get(ctx context.Context, name string, options v1.GetOptions) (result *kenshoaiv1.KDeployment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(kdeploymentsResource, c.ns, name), &kenshoaiv1.KDeployment{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kenshoaiv1.KDeployment), err
}

// List takes label and field selectors, and returns the list of KDeployments that match those selectors.
func (c *FakeKDeployments) List(ctx context.Context, opts v1.ListOptions) (result *kenshoaiv1.KDeploymentList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(kdeploymentsResource, kdeploymentsKind, c.ns, opts), &kenshoaiv1.KDeploymentList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kenshoaiv1.KDeploymentList{ListMeta: obj.(*kenshoaiv1.KDeploymentList).ListMeta}
	for _, item := range obj.(*kenshoaiv1.KDeploymentList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kDeployments.
func (c *FakeKDeployments) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(kdeploymentsResource, c.ns, opts))

}

// Create takes the representation of a kDeployment and creates it.  Returns the server's representation of the kDeployment, and an error, if there is any.
func (c *FakeKDeployments) Create(ctx context.Context, kDeployment *kenshoaiv1.KDeployment, opts v1.CreateOptions) (result *kenshoaiv1.KDeployment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(kdeploymentsResource, c.ns, kDeployment), &kenshoaiv1.KDeployment{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kenshoaiv1.KDeployment), err
}

// Update takes the representation of a kDeployment and updates it. Returns the server's representation of the kDeployment, and an error, if there is any.
func (c *FakeKDeployments) Update(ctx context.Context, kDeployment *kenshoaiv1.KDeployment, opts v1.UpdateOptions) (result *kenshoaiv1.KDeployment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(kdeploymentsResource, c.ns, kDeployment), &kenshoaiv1.KDeployment{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kenshoaiv1.KDeployment), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKDeployments) UpdateStatus(ctx context.Context, kDeployment *kenshoaiv1.KDeployment, opts v1.UpdateOptions) (*kenshoaiv1.KDeployment, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(kdeploymentsResource, "status", c.ns, kDeployment), &kenshoaiv1.KDeployment{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kenshoaiv1.KDeployment), err
}

// Delete takes name of the kDeployment and deletes it. Returns an error if one occurs.
func (c *FakeKDeployments) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(kdeploymentsResource, c.ns, name), &kenshoaiv1.KDeployment{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKDeployments) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(kdeploymentsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &kenshoaiv1.KDeploymentList{})
	return err
}

// Patch applies the patch and returns the patched kDeployment.
func (c *FakeKDeployments) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *kenshoaiv1.KDeployment, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(kdeploymentsResource, c.ns, name, pt, data, subresources...), &kenshoaiv1.KDeployment{})

	if obj == nil {
		return nil, err
	}
	return obj.(*kenshoaiv1.KDeployment), err
}
